using System;
using System.Collections.Generic;
using System.Linq;

namespace AutoForm.Generate
{
	internal static partial class Source
	{
		private readonly struct ControlsTemplate
		{
			private ControlsTemplate(IEnumerable<ModelControlPairTemplate> modelControlPairTemplates, IEnumerable<ControlTemplate> controlTemplates, DefaultControlsTemplate defaultControlsTemplate)
			{
				_defaultControlsTemplate = defaultControlsTemplate;
				_modelControlPairTemplates = modelControlPairTemplates;
				_controlTemplates = controlTemplates;
			}

			private readonly DefaultControlsTemplate _defaultControlsTemplate;
			private readonly IEnumerable<ModelControlPairTemplate> _modelControlPairTemplates;
			private readonly IEnumerable<ControlTemplate> _controlTemplates;

			private const String TEMPLATE =
@"// <auto-generated/>

#pragma warning disable 1591
using Microsoft.AspNetCore.Components;
namespace AutoForm.Generate
{	
	public static class Controls
	{
#nullable enable
#region ModelControlMap
		public static readonly IDictionary<Type, Type> ModelControlMap = new global::System.Collections.ObjectModel.ReadOnlyDictionary<Type, Type>(new Dictionary<Type, Type>()
		{
" + MODEL_CONTROL_PAIRS + @"
		});
#endregion

#region Default Controls
" + DEFAULT_CONTROLS + @"
#endregion

#region Generated Controls
" + CONTROLS + @"
#endregion
#nullable restore
	}
}
#pragma warning restore 1591";


			public ControlsTemplate WithModelControlPairTemplates(IEnumerable<ModelControlPairTemplate> modelControlPairTemplates)
			{
				return new ControlsTemplate(modelControlPairTemplates, _controlTemplates, _defaultControlsTemplate);
			}
			public ControlsTemplate WithControlTemplates(IEnumerable<ControlTemplate> controlTemplates)
			{
				return new ControlsTemplate(_modelControlPairTemplates, controlTemplates, _defaultControlsTemplate);
			}
			public ControlsTemplate WithDefaultControlsTemplate(DefaultControlsTemplate defaultControlsTemplate)
			{
				return new ControlsTemplate(_modelControlPairTemplates, _controlTemplates, defaultControlsTemplate);
			}

			public String Build()
			{
				Int32 controlIndex = 0;
				var controls = String.Join("\n\n", _controlTemplates.Select(t => t.Build(ref controlIndex)));
				var modelControlPairs = String.Join(",\n", _modelControlPairTemplates.Select(t => t.Build()));
				var defaultControls = String.Join("\n\n", _defaultControlsTemplate.Build());

				return TEMPLATE
					.Replace(MODEL_CONTROL_PAIRS, modelControlPairs)
					.Replace(DEFAULT_CONTROLS, defaultControls)
					.Replace(CONTROLS, controls);
			}

			public override String ToString()
			{
				return Build();
			}
		}
	}

}
