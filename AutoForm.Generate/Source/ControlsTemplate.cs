using System;
using System.Collections.Generic;
using System.Linq;

namespace AutoForm.Generate
{
	internal static partial class Source
	{
		private readonly struct ControlsTemplate
		{
			private ControlsTemplate(IEnumerable<ModelControlPairTemplate> modelControlPairTemplates, IEnumerable<ControlTemplate> controlTemplates)
			{
				ModelControlPairTemplates = modelControlPairTemplates;
				ControlTemplates = controlTemplates;
			}

			public readonly IEnumerable<ModelControlPairTemplate> ModelControlPairTemplates;
			public readonly IEnumerable<ControlTemplate> ControlTemplates;

			private const String TEMPLATE =
	@"// <auto-generated/>

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.Components.Rendering;
using Microsoft.AspNetCore.Components.CompilerServices;

using static System.Runtime.CompilerServices.RuntimeHelpers;

namespace AutoForm.Generate
{
	public static class Controls
	{
#nullable enable
		public static readonly IDictionary<Type, Type> ModelControlMap = new ReadOnlyDictionary<Type, Type>(new Dictionary<Type, Type>()
		{
" + MODEL_CONTROL_PAIRS + @"
		});

" + CONTROLS + @"
#nullable restore
	}
}";
			public ControlsTemplate WithModelControlPairTemplates(IEnumerable<ModelControlPairTemplate> modelControlPairTemplates)
			{
				return new ControlsTemplate(modelControlPairTemplates, ControlTemplates);
			}
			public ControlsTemplate WithControlTemplates(IEnumerable<ControlTemplate> controlTemplates)
			{
				return new ControlsTemplate(ModelControlPairTemplates, controlTemplates);
			}

			public String Build()
			{
				Int32 controlIndex = 0;
				var controls = String.Join("\n\n", ControlTemplates.Select(t => t.Build(ref controlIndex)));
				var modelControlPairs = String.Join(",\n", ModelControlPairTemplates.Select(t => t.Build()));

				return TEMPLATE
					.Replace(MODEL_CONTROL_PAIRS, modelControlPairs)
					.Replace(CONTROLS, controls);
			}

            public override String ToString()
            {
				return Build();
            }
        }
	}

}
