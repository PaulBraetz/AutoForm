{
    var source = new FileInfo(Context.Source);
}
# AutoForm #

AutoForm is a model-driven UI control generation tool for .Net. Using attributes and roslyn code generators, UI design for controls can be largely automated.

*Note: this readme was generated on {Print(DateTimeOffset.Now.ToString(System.Globalization.CultureInfo.GetCultureInfo("de-De")));}*

---
## **Features** ##

* Attribute-based model discovery
* Debug json generator
* Blazor component generator

---
## **Versioning** ##

AutoForm uses [Semantic Versioning 2.0.0](https://semver.org/).

---
## **Installation** ##

Currently, there are multiple packages published for generating code based on models:

* For model discovery, an attribute collection is provided in the AutoForm.Attributes package.
* For debug purposes, a json generator is provided in the AutoForm.Json.Analysis package.
* For use in Blazor, a blazor component generator is provided in the AutoForm.Blazor.Analysis package.
* For accessing controls generated by AutoForm.Blazor.Analysis, an entry point control and other default controls and templates are provided in the AutoForm.Blazor package.

In order to use the generators, models have to be annotated using the attributes found in AutoForm.Attributes. Since the generators rely on code semantics in order to discover models, you may implement your own attributes using the same namespace and attribute names as in AutoForm.Attributes. This is currently not reccomended, as the underlying processes are not hardened against faulty attribute declarations.
{{
    var projectRegex = new Regex(@"^.*\.csproj$");
    var versionRegex = new Regex(@"(?<=<(V|v)ersion>)[^<>]*(?=</(V|v)ersion>)");
    var required = new HashSet<String>()
    {
        "AutoForm.Attributes",
        "AutoForm.Blazor",
        "AutoForm.Blazor.Analysis",
        "AutoForm.Json.Analysis"
    };
    var projects = Directory.EnumerateFiles(source.Directory.FullName, 
                                        "*", SearchOption.AllDirectories)
               .Where(s=>projectRegex.IsMatch(s))
               .Select(s=>new FileInfo(s))
               .Where(i=>required.Contains(Path.GetFileNameWithoutExtension(i.FullName)))
               .Select(i=>
               {
                    using var reader = new StreamReader(File.OpenRead(i.FullName));
                    var match = versionRegex.Match(reader.ReadToEnd());
                    return (file: i, result: match);
               })
               .Where(t=>t.result.Success)
               .Select(t=>(name: Path.GetFileNameWithoutExtension(t.file.FullName), version: t.result.Value));

    foreach(var project in projects)
    {
        Print(
@$"

<details>
<summary>Installing {project.name}</summary>

Nuget Gallery: https://www.nuget.org/packages/RhoMicro.{project.name}

Package Manager: `Install-Package RhoMicro.{project.name} -Version {project.version}`

.Net CLI: `dotnet add package RhoMicro.{project.name} --version {project.version}`
</details>");
    }
}}

---
## **How To Use** ##

*The following samples use the provided blazor generator.*{
    void printSample(String name, String caption, String path)
    {
        var codeType = Path.GetExtension(path).Remove(0, 1);
        var url =  @$"https://github.com/PaulBraetz/AutoForm/blob/master/{path.Replace('\\\\', '/')}";
        
        using var reader = new StreamReader(File.OpenRead(path));
        var content = reader.ReadToEnd();
        Print(
@$"

{caption}

```{codeType}
{content}
```

*Found here: [{name}]({url})*");
    }
}

### **Creating Models** ###{
    foreach(var t in new[]
    {
        (name: "TestApp.Models.MyModel", caption: "Register a model by annotating at least one of its properties with the `ModelPropertyAttribute`:", path:@"TestApp\Models\MyModel.cs"),
        (name: "TestApp.Pages.Index.razor", caption: "Access the generated control using the `AutoControl`:", path: @"TestApp\Pages\Index.razor")
    })
    {
        printSample(t.name, t.caption, t.path);
    }
}

Note that default controls provided by `AutoForm.Blazor`, found in `AutoForm.Blazor.Controls`, will bind to the `oninput` event. 
This means that when using these controls, models will be updated with every keystroke instead of when a control loses focus, as is default.

### **Creating Templates** ###{{
    var name = "AutoForm.Blazor.Templates.Abstractions.TemplateBase";
    var caption = "Templates may be created in order surround a control with another component. They must semantically implement the following interface:";
    var path = @"AutoForm.Blazor\Templates\Abstractions\TemplateBase.cs";
    printSample(name, caption, path);
}}

Here, TModel is the model type whose control this template should be applied to. These properties enable the template to access the controls attributes as well as the models current value. The control will be passed to `ChildContent`.

*Note that templates must only provide properties that are semantically identical to those found in `TemplateBase`, as well as inherit from `ComponentBase`.*

{
    foreach(var t in new []
    {
        (name: "TestApp.Templates.MyTemplate", caption: "For uniform bootstrap template styling, a primitive base template may be created like so:", path:@"TestApp\Templates\MyTemplate.razor"),
        (name: "TestApp.Templates.MyTemplate", caption: String.Empty, path:@"TestApp\Templates\MyTemplate.razor.cs"),
        (name: "TestApp.Templates.MyModelNameTemplate", caption: "Implement a template for controls whose model is of type `System.String` or that control the `MyModel.Name` property:", path:@"TestApp\Templates\StringTemplate.cs"),
    })
    {
        printSample(t.name, t.caption, t.path);
    }
}

### **Creating Controls** ###{{
    var name = "AutoForm.Blazor.Controls.Abstractions.ControlBase";
    var caption = "Controls may be declared in order to override default or generated controls. They must semantically implement the following interface:";
    var path = @"AutoForm.Blazor\Controls\Abstractions\ControlBase.cs";
    printSample(name, caption, path);
}}

Here, TModel is the model type this control should be applied to.

*Note that controls must only provide properties that are semantically identical to those found in `ControlBase`, as well as inherit from `ComponentBase`.*

{
    foreach(var t in new []
    {
        (name: "TestApp.Controls.MyModelNameControl", caption: "Implement a control for models of type `System.String` or subcontrol for `MyModel.Name`:", path:@"TestApp\Controls\StringControl.razor"),
        (name: "TestApp.Controls.MyModelNameControl", caption: "", path:@"TestApp\Controls\StringControl.razor.cs")
    })
    {
        printSample(t.name, t.caption, t.path);
    }
}

- - - -
